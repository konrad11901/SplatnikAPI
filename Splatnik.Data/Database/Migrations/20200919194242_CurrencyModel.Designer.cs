// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Splatnik.Data.Database;

namespace Splatnik.Data.Database.Migrations
{
	[DbContext(typeof(DataContext))]
	[Migration("20200919194242_CurrencyModel")]
	partial class CurrencyModel
	{
		protected override void BuildTargetModel(ModelBuilder modelBuilder)
		{
#pragma warning disable 612, 618
			modelBuilder
				.HasAnnotation("ProductVersion", "3.1.7")
				.HasAnnotation("Relational:MaxIdentifierLength", 128)
				.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
				{
					b.Property<string>("Id")
						.HasColumnType("nvarchar(450)");

					b.Property<string>("ConcurrencyStamp")
						.IsConcurrencyToken()
						.HasColumnType("nvarchar(max)");

					b.Property<string>("Name")
						.HasColumnType("nvarchar(256)")
						.HasMaxLength(256);

					b.Property<string>("NormalizedName")
						.HasColumnType("nvarchar(256)")
						.HasMaxLength(256);

					b.HasKey("Id");

					b.HasIndex("NormalizedName")
						.IsUnique()
						.HasName("RoleNameIndex")
						.HasFilter("[NormalizedName] IS NOT NULL");

					b.ToTable("AspNetRoles");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("int")
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<string>("ClaimType")
						.HasColumnType("nvarchar(max)");

					b.Property<string>("ClaimValue")
						.HasColumnType("nvarchar(max)");

					b.Property<string>("RoleId")
						.IsRequired()
						.HasColumnType("nvarchar(450)");

					b.HasKey("Id");

					b.HasIndex("RoleId");

					b.ToTable("AspNetRoleClaims");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
				{
					b.Property<string>("Id")
						.HasColumnType("nvarchar(450)");

					b.Property<int>("AccessFailedCount")
						.HasColumnType("int");

					b.Property<string>("ConcurrencyStamp")
						.IsConcurrencyToken()
						.HasColumnType("nvarchar(max)");

					b.Property<string>("Email")
						.HasColumnType("nvarchar(256)")
						.HasMaxLength(256);

					b.Property<bool>("EmailConfirmed")
						.HasColumnType("bit");

					b.Property<bool>("LockoutEnabled")
						.HasColumnType("bit");

					b.Property<DateTimeOffset?>("LockoutEnd")
						.HasColumnType("datetimeoffset");

					b.Property<string>("NormalizedEmail")
						.HasColumnType("nvarchar(256)")
						.HasMaxLength(256);

					b.Property<string>("NormalizedUserName")
						.HasColumnType("nvarchar(256)")
						.HasMaxLength(256);

					b.Property<string>("PasswordHash")
						.HasColumnType("nvarchar(max)");

					b.Property<string>("PhoneNumber")
						.HasColumnType("nvarchar(max)");

					b.Property<bool>("PhoneNumberConfirmed")
						.HasColumnType("bit");

					b.Property<string>("SecurityStamp")
						.HasColumnType("nvarchar(max)");

					b.Property<bool>("TwoFactorEnabled")
						.HasColumnType("bit");

					b.Property<string>("UserName")
						.HasColumnType("nvarchar(256)")
						.HasMaxLength(256);

					b.HasKey("Id");

					b.HasIndex("NormalizedEmail")
						.HasName("EmailIndex");

					b.HasIndex("NormalizedUserName")
						.IsUnique()
						.HasName("UserNameIndex")
						.HasFilter("[NormalizedUserName] IS NOT NULL");

					b.ToTable("AspNetUsers");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("int")
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<string>("ClaimType")
						.HasColumnType("nvarchar(max)");

					b.Property<string>("ClaimValue")
						.HasColumnType("nvarchar(max)");

					b.Property<string>("UserId")
						.IsRequired()
						.HasColumnType("nvarchar(450)");

					b.HasKey("Id");

					b.HasIndex("UserId");

					b.ToTable("AspNetUserClaims");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
				{
					b.Property<string>("LoginProvider")
						.HasColumnType("nvarchar(128)")
						.HasMaxLength(128);

					b.Property<string>("ProviderKey")
						.HasColumnType("nvarchar(128)")
						.HasMaxLength(128);

					b.Property<string>("ProviderDisplayName")
						.HasColumnType("nvarchar(max)");

					b.Property<string>("UserId")
						.IsRequired()
						.HasColumnType("nvarchar(450)");

					b.HasKey("LoginProvider", "ProviderKey");

					b.HasIndex("UserId");

					b.ToTable("AspNetUserLogins");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
				{
					b.Property<string>("UserId")
						.HasColumnType("nvarchar(450)");

					b.Property<string>("RoleId")
						.HasColumnType("nvarchar(450)");

					b.HasKey("UserId", "RoleId");

					b.HasIndex("RoleId");

					b.ToTable("AspNetUserRoles");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
				{
					b.Property<string>("UserId")
						.HasColumnType("nvarchar(450)");

					b.Property<string>("LoginProvider")
						.HasColumnType("nvarchar(128)")
						.HasMaxLength(128);

					b.Property<string>("Name")
						.HasColumnType("nvarchar(128)")
						.HasMaxLength(128);

					b.Property<string>("Value")
						.HasColumnType("nvarchar(max)");

					b.HasKey("UserId", "LoginProvider", "Name");

					b.ToTable("AspNetUserTokens");
				});

			modelBuilder.Entity("Splatnik.Data.Database.DbModels.Budget", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("int")
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<DateTime>("CreatedAt")
						.HasColumnType("datetime2");

					b.Property<string>("Description")
						.IsRequired()
						.HasColumnType("nvarchar(200)")
						.HasMaxLength(200);

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("nvarchar(50)")
						.HasMaxLength(50);

					b.Property<DateTime>("UpdatedAt")
						.HasColumnType("datetime2");

					b.Property<string>("UserId")
						.IsRequired()
						.HasColumnType("nvarchar(450)")
						.HasMaxLength(450);

					b.HasKey("Id");

					b.HasIndex("UserId");

					b.ToTable("Budgets");
				});

			modelBuilder.Entity("Splatnik.Data.Database.DbModels.Currency", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("int")
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<string>("LongName")
						.HasColumnType("nvarchar(max)");

					b.Property<string>("ShortName")
						.HasColumnType("nvarchar(max)");

					b.HasKey("Id");

					b.ToTable("Currency");
				});

			modelBuilder.Entity("Splatnik.Data.Database.DbModels.Expense", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("int")
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<DateTime>("CreatedAt")
						.HasColumnType("datetime2");

					b.Property<int>("CurrencyId")
						.HasColumnType("int");

					b.Property<string>("Description")
						.HasColumnType("nvarchar(200)")
						.HasMaxLength(200);

					b.Property<decimal>("ExpanseValue")
						.HasColumnType("decimal(10, 2)");

					b.Property<DateTime>("IncomeDate")
						.HasColumnType("datetime2");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("nvarchar(100)")
						.HasMaxLength(100);

					b.Property<int>("PeriodId")
						.HasColumnType("int");

					b.HasKey("Id");

					b.HasIndex("CurrencyId");

					b.HasIndex("PeriodId");

					b.ToTable("Expenses");
				});

			modelBuilder.Entity("Splatnik.Data.Database.DbModels.Income", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("int")
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<DateTime>("CreatedAt")
						.HasColumnType("datetime2");

					b.Property<int>("CurrencyId")
						.HasColumnType("int");

					b.Property<string>("Description")
						.HasColumnType("nvarchar(200)")
						.HasMaxLength(200);

					b.Property<DateTime>("IncomeDate")
						.HasColumnType("datetime2");

					b.Property<decimal>("IncomeValue")
						.HasColumnType("decimal(10, 2)");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("nvarchar(100)")
						.HasMaxLength(100);

					b.Property<int>("PeriodId")
						.HasColumnType("int");

					b.HasKey("Id");

					b.HasIndex("CurrencyId");

					b.HasIndex("PeriodId");

					b.ToTable("Incomes");
				});

			modelBuilder.Entity("Splatnik.Data.Database.DbModels.Period", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("int")
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<int>("BudgetId")
						.HasColumnType("int");

					b.Property<DateTime>("CreatedAt")
						.HasColumnType("datetime2");

					b.Property<string>("DisplayName")
						.IsRequired()
						.HasColumnType("nvarchar(7)")
						.HasMaxLength(7);

					b.Property<DateTime>("FirstDay")
						.HasColumnType("datetime2");

					b.Property<DateTime>("LastDay")
						.HasColumnType("datetime2");

					b.Property<string>("Notes")
						.HasColumnType("nvarchar(1000)")
						.HasMaxLength(1000);

					b.HasKey("Id");

					b.HasIndex("BudgetId");

					b.ToTable("Periods");
				});

			modelBuilder.Entity("Splatnik.Data.Database.DbModels.RefreshToken", b =>
				{
					b.Property<string>("Token")
						.ValueGeneratedOnAdd()
						.HasColumnType("nvarchar(450)");

					b.Property<DateTime>("CreationDate")
						.HasColumnType("datetime2");

					b.Property<DateTime>("ExpiryDate")
						.HasColumnType("datetime2");

					b.Property<bool>("Invalidated")
						.HasColumnType("bit");

					b.Property<string>("JwtId")
						.HasColumnType("nvarchar(max)");

					b.Property<bool>("Used")
						.HasColumnType("bit");

					b.Property<string>("UserId")
						.HasColumnType("nvarchar(450)");

					b.HasKey("Token");

					b.HasIndex("UserId");

					b.ToTable("RefreshTokens");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
						.WithMany()
						.HasForeignKey("RoleId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
						.WithMany()
						.HasForeignKey("RoleId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Splatnik.Data.Database.DbModels.Budget", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Splatnik.Data.Database.DbModels.Expense", b =>
				{
					b.HasOne("Splatnik.Data.Database.DbModels.Currency", "Currency")
						.WithMany()
						.HasForeignKey("CurrencyId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("Splatnik.Data.Database.DbModels.Period", "Period")
						.WithMany("Expenses")
						.HasForeignKey("PeriodId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Splatnik.Data.Database.DbModels.Income", b =>
				{
					b.HasOne("Splatnik.Data.Database.DbModels.Currency", "Currency")
						.WithMany()
						.HasForeignKey("CurrencyId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("Splatnik.Data.Database.DbModels.Period", "Period")
						.WithMany("Incomes")
						.HasForeignKey("PeriodId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Splatnik.Data.Database.DbModels.Period", b =>
				{
					b.HasOne("Splatnik.Data.Database.DbModels.Budget", "Budget")
						.WithMany("Periods")
						.HasForeignKey("BudgetId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Splatnik.Data.Database.DbModels.RefreshToken", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
						.WithMany()
						.HasForeignKey("UserId");
				});
#pragma warning restore 612, 618
		}
	}
}
